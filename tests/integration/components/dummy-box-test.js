import { moduleForComponent, test } from 'ember-qunit';
import hbs from 'htmlbars-inline-precompile';
import { percySnapshot } from 'ember-percy';
import { find, click } from 'ember-native-dom-helpers';

moduleForComponent('dummy-box', 'Integration | Component | dummy box', {
  integration: true
});

test('it renders', function(assert) {
  this.render(hbs`{{dummy-box}}`);
  assert.equal(find('*').textContent.trim(), '');

  this.render(hbs`
    {{#dummy-box}}
      This is a dummy box!
    {{/dummy-box}}
  `);
  assert.equal(find('*').textContent.trim(), 'This is a dummy box!');

  percySnapshot('dummy box test');

  // Tests that per-snapshot breakpoints override default breakpoints.
  percySnapshot('dummy box test on small width only', {breakpoints: ['mobile']});
});

test('name is autogenerated if given a QUnit assert object', function(assert) {
  assert.expect(0);
  percySnapshot(assert);
});

test('name is autogenerated if given a Mocha test object', function(assert) {
  assert.expect(0);
  var mochaTestDouble = {
    fullTitle: function() {
      return 'component test - mocked fullTitle for Mocha tests';
    },
  };
  percySnapshot(mochaTestDouble);
});

['text', 'search', 'tel', 'url', 'email', 'password', 'number'].forEach(function(inputType) {
  test(`it snapshots input ${inputType} values`, function(assert) {
    this.set('inputType', inputType);
    this.set('inputValue', `Testing ${inputType} input type`);

    this.render(hbs`{{input value="Testing" type="inputType"}}`);

    assert.equal(find('input').value, 'Testing', 'value property is set');
    assert.equal(find('input').getAttribute('value'), undefined, 'value attribute is not set');

    percySnapshot(`${inputType} input with value`);
  });
});

test('it snapshots checkbox values', async function(assert) {
  this.set('isChecked', false);
  this.render(hbs`{{input type="checkbox" checked=isChecked}}`);
  assert.equal(find('input').checked, false, 'checkbox is not checked');
  percySnapshot('checkbox without check');

  this.set('isChecked', true); // clicking a checkbox triggers a missing internal Ember jQuery event
  assert.equal(find('input').checked, true, 'checkbox is checked');
  percySnapshot('checkbox with check');
});

test('it snapshots radio button values', async function(assert) {
  this.set('isChecked', false);
  this.render(hbs`{{input type="radio" checked=isChecked}}`);
  assert.equal(find('input').checked, false, 'radio button is not checked');
  percySnapshot('checkbox without check');

  await click('input');
  assert.equal(find('input').checked, true, 'radio button is checked');
  percySnapshot('checkbox with check');
});

test('it snapshots textarea values', function(assert) {
  this.render(hbs`{{textarea value="Testing"}}`);

  assert.equal(find('textarea').value, 'Testing', 'value property is set');
  assert.equal(find('textarea').textContent, '', 'text content is not set');

  percySnapshot('textarea with value');
});
